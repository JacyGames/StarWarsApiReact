{"version":3,"sources":["images/planets-saturn-img.jpg","components/ButtonRefresh/ButtonRefresh.jsx","components/Loading/Loader.jsx","components/SelectedSubject/SelectedSubject.jsx","components/Paginator/Paginator.jsx","components/Person/Person.jsx","components/Starship/Starship.jsx","components/Planet/Planet.jsx","components/api/StarWarsAPI.js","components/HOKItem/ItemHOK.jsx","App.js","index.js"],"names":["module","exports","ButtonRefresh","refresher","onClick","Loader","className","SelectedSubject","subject","selectCurrentSubject","currentSubjectName","name","bind","Paginator","pagesCount","currentPage","setPage","pages","i","push","map","page","key","Math","random","Person","birth_year","eye_color","gender","hair_color","height","homeworld","id","mass","skin_color","datanone","isFetching","subjects","imageSource","src","alt","person","Starship","model","manufacturer","cost_in_credits","length","max_atmosphering_speed","crew","passengers","cargo_capacity","starship_class","Planet","climate","diameter","gravity","orbital_period","population","rotation_period","surface_water","terrain","myImage","ApiService","baseUrl","getData","url","a","fetch","response","json","getSomething","items","getSomethingInfo","then","count","ItemHOK","Component","Item","myservice","currentElement","state","findIndex","element","setState","currentSubject","getFromServer","this","undefined","results","data","concat","match","join","floor","getSomeInfoServer","prevProps","prevState","snapshot","React","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.db82acae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/planets-saturn-img.3cd88db7.jpg\";","import React from \"react\";\r\n\r\nexport const ButtonRefresh = ({refresher}) => {\r\n    return <div>\r\n        <button onClick={refresher}>REFRESH</button>\r\n    </div>\r\n}","import React from \"react\";\r\nimport \"./Loader.css\"\r\n\r\nexport const Loader = () => {\r\n    return <div>\r\n        <div className=\"loadingio-spinner-double-ring-2y0pgtys6r8\">\r\n            <div className=\"ldio-rfa5c9kv31e\">\r\n                <div></div>\r\n                <div></div>\r\n                <div>\r\n                    <div></div>\r\n                </div>\r\n                <div>\r\n                    <div></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}","import React from \"react\";\r\nimport \"./SelectedSubject.css\"\r\n\r\n\r\nexport const SelectedSubject = ({subject, selectCurrentSubject, currentSubjectName}) => {\r\n    if(currentSubjectName && currentSubjectName === subject.name) {\r\n        return <div onClick={selectCurrentSubject.bind(this, subject.name)} className={\"subject\"}>\r\n           <strong className={\"selected\"}>{subject.name}</strong>\r\n        </div>\r\n\r\n    }\r\n    return <div onClick={selectCurrentSubject.bind(this, subject.name)} className={\"subject\"}>\r\n        {subject.name}\r\n    </div>\r\n}\r\n","import React from \"react\";\r\nimport \"./Paginator.css\"\r\n\r\n\r\nexport const Paginator = ({pagesCount, currentPage , setPage}) => {\r\n    let pages = [];\r\n    for(let i=1; i<=pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    return <div className={\"paginator\"}>\r\n        {pages.map((page) => {\r\n\r\n            if(page === currentPage) {\r\n                return <span  onClick={setPage.bind(this, page)} key={10001}> <b className={\"activated\"}>{page}</b> </span>\r\n            }\r\n\r\n            return <span onClick={setPage.bind(this, page)} key={Math.random() * 10000}>{page}</span>\r\n        } )}\r\n    </div>\r\n\r\n}\r\n","import React from \"react\";\r\nimport {ButtonRefresh} from \"../ButtonRefresh/ButtonRefresh\";\r\nimport {Loader} from \"../Loading/Loader\";\r\nimport {SelectedSubject} from \"../SelectedSubject/SelectedSubject\";\r\nimport {Paginator} from \"../Paginator/Paginator\";\r\nimport \"../Styles/commonStyle.css\"\r\n\r\nexport const Person = ({\r\n                           birth_year, eye_color, gender, hair_color, height,\r\n                           homeworld, id, mass, name, skin_color, datanone,\r\n                           refresher, isFetching, subjects, selectCurrentSubject,\r\n                           pagesCount, currentPage, setPage, currentSubjectName\r\n                       }) => {\r\n\r\n\r\n    const imageSource = `https://starwars-visualguide.com/assets/img/characters/${id}.jpg`;\r\n\r\n\r\n    return (\r\n        <div className={\"my-card\"}>\r\n            <div className={\"my-card-body\"}>\r\n\r\n\r\n\r\n\r\n            {isFetching ? <Loader/> : <div className={\"body\"}>\r\n                <div><img src={imageSource} alt=\"\"/></div>\r\n                <div className={\"info\"}>\r\n                    <div className={\"info-exact\"}>\r\n                        <div>Birth: {birth_year}</div>\r\n                        <div>Eye color: {eye_color}</div>\r\n                        <div>Gender: {gender}</div>\r\n                        <div>Hair color: {hair_color}</div>\r\n                        <div>Height: {height}</div>\r\n                        <div>Homeworld:{homeworld + \".jpg\"} <img src={homeworld} alt=\"\"/></div>\r\n                        <div>Weight: {mass}</div>\r\n                        <div>Name: {name}</div>\r\n                        <div>Skin color: {skin_color}</div>\r\n                    </div>\r\n                    <div>\r\n                        {subjects.map(person => <SelectedSubject key={Math.random() * 1000} subject={person}\r\n                                                                 selectCurrentSubject={selectCurrentSubject}\r\n                                                                 currentSubjectName={currentSubjectName}\r\n                        />)}\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n            }\r\n            {datanone && <ButtonRefresh refresher={refresher}/>}\r\n            <div className={\"centered\"}>\r\n                <Paginator pagesCount={pagesCount} currentPage={currentPage} setPage={setPage} />\r\n            </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n","import React from \"react\";\r\nimport \"../Styles/commonStyle.css\"\r\nimport {ButtonRefresh} from \"../ButtonRefresh/ButtonRefresh\";\r\nimport {Loader} from \"../Loading/Loader\";\r\nimport {SelectedSubject} from \"../SelectedSubject/SelectedSubject\";\r\nimport {Paginator} from \"../Paginator/Paginator\";\r\n\r\nexport const Starship = ({\r\n                             name, model, manufacturer, cost_in_credits, length, max_atmosphering_speed, crew,\r\n                             passengers, cargo_capacity, starship_class, datanone, refresher, isFetching,\r\n                             subjects, selectCurrentSubject,\r\n                             pagesCount, currentPage, setPage, currentSubjectName\r\n                         }) => {\r\n\r\n    const imageSource = `https://starwars-visualguide.com/assets/img/starships/10.jpg`;\r\n    return (\r\n        <div className={\"my-card\"}>\r\n            <div className={\"my-card-body\"}>\r\n\r\n\r\n                {isFetching ? <Loader/> : <div className={\"body\"}>\r\n                    <div>' <img src={imageSource} alt=\"\"/></div>\r\n                    <div  className={\"info\"}>\r\n                        <div className={\"info-exact\"}>\r\n                            <div>model {model}</div>\r\n                            <div>manufacturer {manufacturer}</div>\r\n                            <div>cost_in_credits {cost_in_credits}</div>\r\n                            <div>Name {name}</div>\r\n                            <div>length {length}</div>\r\n                            <div>max_atmosphering_speed {max_atmosphering_speed}</div>\r\n                            <div> crew {crew}</div>\r\n                            <div>passengers {passengers}</div>\r\n                            <div>cargo_capacity {cargo_capacity}</div>\r\n                            <div>starship_class {starship_class}</div>\r\n                        </div>\r\n                        <div>\r\n                            {subjects.map(person => <SelectedSubject key={Math.random() * 1000} subject={person}\r\n                                                                     selectCurrentSubject={selectCurrentSubject}\r\n                                                                     currentSubjectName={currentSubjectName}/>)}\r\n                        </div>\r\n                    </div>\r\n                </div>}\r\n                {datanone && <ButtonRefresh refresher={refresher}/>}\r\n                <div className={\"centered\"}>\r\n                    <Paginator pagesCount={pagesCount} currentPage={currentPage} setPage={setPage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n","import React, {Component} from \"react\";\r\nimport \"../Styles/commonStyle.css\"\r\nimport {ButtonRefresh} from \"../ButtonRefresh/ButtonRefresh\";\r\nimport {Loader} from \"../Loading/Loader\";\r\nimport {SelectedSubject} from \"../SelectedSubject/SelectedSubject\";\r\nimport myImage from \"../../images/planets-saturn-img.jpg\";\r\nimport {Paginator} from \"../Paginator/Paginator\";\r\n\r\nexport const Planet = ({\r\n                           climate, diameter, gravity, id, name, orbital_period, population,\r\n                           rotation_period, surface_water, terrain, datanone, refresher, isFetching,\r\n                           subjects, selectCurrentSubject,\r\n                           pagesCount, currentPage, setPage, currentSubjectName\r\n                       }) => {\r\n\r\n    let  imageSource;\r\n\r\n    if(id > 20) {\r\n        imageSource = myImage;\r\n        }else{\r\n        imageSource = `https://starwars-visualguide.com/assets/img/planets/${id}.jpg`;\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"my-card\"}>\r\n            <div className={\"my-card-body\"}>\r\n\r\n            {datanone && <ButtonRefresh refresher={refresher}/>}\r\n            {isFetching ? <Loader/> : <div className={\"body\"}>\r\n                <div> <img src={imageSource} alt=\"\"/></div>\r\n                <div className={\"info\"}>\r\n                    <div className={\"info-exact\"}>  <div>Climate {climate}</div>\r\n                        <div>Diameter {diameter}</div>\r\n                        <div>Gravity {gravity}</div>\r\n                        <div>Name {name}</div>\r\n                        <div>Orbital period {orbital_period}</div>\r\n                        <div>Population {population}</div>\r\n                        <div>Rotation period {rotation_period}</div>\r\n                        <div>Surface water {surface_water}</div>\r\n                        <div>Terrain {terrain}</div></div>\r\n                    <div>  {subjects.map(person => <SelectedSubject key={Math.random() * 1000} subject={person}\r\n                                                                    selectCurrentSubject={selectCurrentSubject}\r\n                                                                    currentSubjectName={currentSubjectName}/>)}</div>\r\n\r\n                </div>\r\n            </div>}\r\n\r\n            <div className={\"centered\"}>\r\n                <Paginator pagesCount={pagesCount} currentPage={currentPage} setPage={setPage} />\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n","\r\n\r\nclass ApiService {\r\n\r\n    baseUrl = \"https://swapi.dev/api/\";\r\n\r\n    getData = async (url) => {\r\n        const response = await fetch(this.baseUrl + url);\r\n        return await response.json();\r\n   }\r\n   getSomething = (items, page) => {\r\n        return  this.getData(`${items}/?page=${page}`);\r\n   }\r\n    getSomethingInfo =(items) => {\r\n        return this.getData(`${items}/`).then(response => response.count);\r\n    }\r\n\r\n\r\n}\r\nexport default ApiService;","import React from \"react\";\r\nimport \"../Styles/commonStyle.css\"\r\nimport ApiService from \"../api/StarWarsAPI\";\r\n\r\nexport const ItemHOK = (Component, subject) => {\r\n\r\n    class Item extends React.Component {\r\n\r\n        myservice = new ApiService();\r\n\r\n        getFromServer() {\r\n\r\n\r\n            this.setState({...this.state, isFetching: true});\r\n            this.myservice.getSomething(subject, this.state.page).then((response) => {\r\n                    if (response.results === undefined) {\r\n                        this.setState({...this.state, datanone: true, isFetching: false});\r\n\r\n                        return;\r\n                    }\r\n                    const data = response.results.concat();\r\n\r\n                    data.map(person => person.id = person.url.match(/\\d/g).join(''));\r\n\r\n                    this.setState({...this.state, datanone: false, subjects: [...data], isFetching: false, currentSubjectName: data[0].name});\r\n\r\n                }\r\n            )\r\n        }\r\n        getSomeInfoServer() {\r\n            this.myservice.getSomethingInfo(subject).then((count) => {\r\n\r\n\r\n\r\n                const pagesCount = Math.floor(count / 10);\r\n\r\n                this.setState({...this.state, pagesCount})\r\n            })\r\n        }\r\n\r\n        selectCurrentSubject = (name) => {\r\n            const currentElement = this.state.subjects.findIndex(element => element.name === name);\r\n            this.setState({...this.state, currentSubject: currentElement, currentSubjectName: name})\r\n        }\r\n\r\n\r\n\r\n        refresher = () => {\r\n\r\n            this.getFromServer();\r\n\r\n        }\r\n\r\n        componentDidMount() {\r\n\r\n            this.getFromServer();\r\n            this.getSomeInfoServer();\r\n\r\n\r\n        }\r\n\r\n        componentDidUpdate(prevProps, prevState, snapshot) {\r\n            if(prevState.page !== this.state.page) {\r\n                this.getFromServer();\r\n            }\r\n        }\r\n\r\n\r\n        state = {\r\n            datanone: false,\r\n            subjects: [{}],\r\n            isFetching: false,\r\n            currentSubject: 0,\r\n            page: 1,\r\n            pagesCount: null,\r\n            currentSubjectName: ''\r\n        }\r\n\r\n        setPage = (page) => {\r\n           this.setState({...this.state, page});\r\n        }\r\n\r\n\r\n        render() {\r\n            return (\r\n                <Component {...this.state.subjects[this.state.currentSubject]} datanone={this.state.datanone} refresher={this.refresher}\r\n                           isFetching={this.state.isFetching} subjects={this.state.subjects}\r\n                           selectCurrentSubject={this.selectCurrentSubject} pagesCount={this.state.pagesCount}\r\n                           setPage={this.setPage} currentPage={this.state.page} currentSubjectName={this.state.currentSubjectName}\r\n                />\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n    return <Item/>\r\n\r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport {Person} from \"./components/Person/Person\";\nimport {Starship} from \"./components/Starship/Starship\";\nimport {Planet} from \"./components/Planet/Planet\";\nimport {ItemHOK} from \"./components/HOKItem/ItemHOK\";\nimport \"./App.css\"\n\nfunction App() {\n\n\n  return (\n    <div className={\"main\"}>\n      <div>\n          <nav className=\"navbar custumized\">\n              <span className=\"navbar-brand mb-0 h1\">Star wars info</span>\n          </nav>\n      </div>\n        {ItemHOK(Person, \"people\")}\n      {ItemHOK(Starship, \"starships\")}\n      {ItemHOK(Planet, \"planets\")}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}